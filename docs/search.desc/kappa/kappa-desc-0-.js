searchState.loadedDescShard("kappa", 0, "Command line interface for the <code>kappa</code>.\nThis module defines structs, variables and other …\nDistribution of Hollow Spheres (DHS) for irregular grains …\nComputes light scattering properties of randomly oriented …\nRead the <code>lnk</code> files\nMie scattering calculation\nThe heart of <code>kappa</code>.\nAstronomical Silicate\nMethanol ice\nGraphite\nCarbon Nano Diamonds\nOrganic stuff\nCarbon\nCarbon\nDefines a material component which is statically defined.\nClass of the component.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtinction coefficient.\nWavelengths.\nRefractive index.\nName of the component.\nDensity of the component.\nsize\nState of the component.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis function computes electromagnetic scattering by a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes light scattering properties of randomly oriented …\nComputing geometrical cross-section of randomly oriented …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines a material component which is initialized at …\nMueller matrix structure\nParticle\nClass of the component.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtinction coefficient.\nWavelengths.\nRefractive index.\nName of the component.\nDensity of the component.\nsize\nState of the component.\nDefines mathematical expressions commonly used when …\nGamma function related utilities\nReturns the argument unchanged.\nThis subroutine performs integration of S_p(kRg) (Equation …\nCalls <code>U::from(self)</code>.\nDefault accuracy for <code>f64</code>, equivalent to <code>0.0 * F64_PREC</code>\nConstant value for <code>ln(2 * sqrt(e / pi))</code>\nConstant value for <code>ln(pi)</code>\nConstant value for <code>2 * sqrt(e / pi)</code>\nComputes the lower incomplete gamma function …\nComputes the lower incomplete regularized gamma function …\nComputes the upper incomplete gamma function …\nComputes the upper incomplete regularized gamma function …\nComputes the Digamma function which is defined as the …\nComputes the gamma function with an accuracy of 16 …\nComputes the lower incomplete gamma function …\nComputes the lower incomplete regularized gamma function …\nComputes the upper incomplete gamma function …\nComputes the upper incomplete regularized gamma function …\nComputes the logarithm of the gamma function with an …\nCompares if two floats are close via <code>approx::abs_diff_eq</code> …\nGiven the arrays <code>xv</code> and <code>yv</code> of lengh <code>n</code> containing a …\nGiven the arrays <code>xa</code> and <code>ya</code> which tabulate a function (with …")